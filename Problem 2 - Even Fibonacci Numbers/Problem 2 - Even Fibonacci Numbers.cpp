/*<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:
$$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \dots$$</p>
<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>
*/

#include <stdio.h>
#include <forward_list>
#include <iostream>
#include <iterator>
#include <numeric>
#include <ranges>
#include <vector>
#include <stack>

int main()
{
    std::stack<int> input = std::stack<int>();
    //insert values
    int previousval = 1;
    input.push(previousval);
    int currentval = 2;
    input.push(currentval);
    // becuase 4mil is the cap, the while condition check has to take place before the value is added
    while (currentval <= 4000000)
    {
        input.push(currentval); // value inserted, ready to move to new numbers
        int nextval = currentval + previousval; // this is essentially a temporary value
        previousval = currentval;
        currentval = nextval;
    }

    int sum = 0;
    //peculiarly enough, there's no great way to use ranges on stacks (possibly needs bidirectional iterators?)
    //as such, this has to be filtered and summed the old fashioned way
    while (!input.empty())
    {
        int nextnumber = input.top(); // temporary value because results don't align with expected
        if (nextnumber % 2 == 0)
            sum += nextnumber;
        input.pop();
    }

    std::cout << "sum: " << sum << std::endl;
    std::getchar();

    //NOTE: currently getting 4613734, which looks right but isn't being accepted; setting aside.
}
